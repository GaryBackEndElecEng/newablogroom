// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
// url      = env("DATABASE_URL_AWS"), update date: @db.Date

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  // url      = env("localDB")
  url      = env("DATABASE_URL_AWS")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String   @unique @map("user_id")
  expires      DateTime
  sessionToken String   @unique @map("session_token")
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id             String         @id @unique @default(cuid())
  name           String?
  email          String         @unique
  password       String?
  emailVerified  DateTime?      @map("email_verified")
  image          String?
  imgKey         String?
  bio            String?
  accounts       Account[]
  sessions       Session[]
  blogs          Blog[]
  posts          Post[]
  quoteImgs      QuoteImg[]
  devpDeployimgs DevDeployimg[]
  showinfo       Boolean?
  admin          Boolean        @default(false)
  username       String?

  @@map("users")
}

model Signup {
  id    Int    @id @unique @default(autoincrement())
  email String @unique
  name  String
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Blog {
  id         Int         @id @default(autoincrement())
  name       String
  title      String?
  desc       String
  img        String?
  attr       String
  eleId      String?
  class      String?
  inner_html String?
  cssText    String?
  imgKey     String?
  imgBgKey   String?
  selectors  Selector[]
  elements   Element[]
  codes      Code[]
  charts     Chart[]
  messages   Message[]
  user       User        @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id    String
  update     DateTime?   @updatedAt
  date       DateTime    @default(now())
  show       Boolean
  username   String?
  rating     Int
  pageCounts PageCount[]

  @@map("blogs")
}

model Selector {
  id         Int       @id @default(autoincrement())
  placement  Int
  name       String
  eleId      String
  class      String
  inner_html String?
  cssText    String
  rows       Json
  colAttr    ColAttr[]
  rowNum     Int
  colNum     Int
  blog       Blog      @relation(fields: [blog_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  blog_id    Int
  header     Boolean
  footer     Boolean
  headerType String?

  @@map("selectors")
}

model ColAttr {
  id          Int      @id @default(autoincrement())
  T           Int
  B           Int
  selector    Selector @relation(fields: [selector_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  selector_id Int

  @@map("colAttr")
}

// model Row {
//   id          Int      @id @default(autoincrement())
//   name        String
//   eleId       String
//   class       String
//   inner_html  String?
//   imgKey      String?
//   cssText     String
//   cols        Col[]
//   selector    Selector @relation(fields: [selector_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
//   selector_id Int
//   order       Int
// }

// model Col {
//   id         Int           @id @default(autoincrement())
//   name       String
//   eleId      String
//   class      String
//   inner_html String?
//   imgKey     String?
//   cssText    String
//   elements   Element_sel[]
//   row        Row           @relation(fields: [row_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
//   row_id     Int
//   order      Int
// }

// model Element_sel {
//   id         Int     @id @default(autoincrement())
//   placement  Int?
//   name       String
//   eleId      String
//   class      String
//   inner_html String
//   cssText    String
//   attr       String?
//   selectorId Int?
//   img        String?
//   imgKey     String?
//   col        Col     @relation(fields: [col_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
//   col_id     Int
//   order      Int
// }

model Element {
  id         Int     @id @default(autoincrement())
  placement  Int
  name       String
  eleId      String
  class      String
  inner_html String
  cssText    String
  attr       String?
  img        String?
  imgKey     String?
  type       String?
  blog       Blog    @relation(fields: [blog_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  blog_id    Int

  @@map("elements")
}

model Code {
  id         Int        @id @default(autoincrement())
  placement  Int?
  name       String
  img        String
  type       String
  eleId      String
  class      String
  inner_html String
  cssText    String
  blog       Blog       @relation(fields: [blog_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  blog_id    Int
  template   String
  linecode   Linecode[]

  @@map("codes")
}

model Linecode {
  id      Int    @id @default(autoincrement())
  text    String
  code    Code   @relation(fields: [code_id], references: [id], onDelete: Cascade)
  code_id Int

  @@map("linecode")
}

model Chart {
  id          Int    @id @default(autoincrement())
  type        String
  cssText     String
  class       String
  chartOption Json
  eleId       String
  placement   Int
  blog        Blog   @relation(fields: [blog_id], references: [id], onDelete: Cascade)
  blog_id     Int

  @@map("charts")
}

model Message {
  id      Int      @id @default(autoincrement())
  rate    Int
  name    String
  email   String
  msg     String
  user_id String?
  blog    Blog?    @relation(fields: [blog_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  blog_id Int?
  date    DateTime @default(now())
  secret  Boolean
  sent    Boolean

  @@map("messages")
}

model DeletedImg {
  id     Int      @id @default(autoincrement())
  count  Int?
  imgKey String   @unique
  del    Boolean
  date   DateTime @default(now())

  @@unique([imgKey, id])
}

model Post {
  id         Int         @id @default(autoincrement())
  title      String
  content    String?
  link       String?
  image      String?
  imageKey   String?
  sendReqKey String?
  sendMsg    String?
  published  Boolean     @default(false)
  date       DateTime    @default(now())
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  likes      Int?
  pagecounts PageCount[]

  @@map("posts")
}

model PageCount {
  id      Int    @id @default(autoincrement())
  name    String @unique
  count   Int    @default(autoincrement())
  blog    Blog?  @relation(fields: [blog_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  post    Post?  @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  blog_id Int?
  post_id Int?

  @@unique([name, id])
  @@map("pagecounts")
}

model Quote {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  type   String
  basic  Boolean
  isPage Boolean @default(true)
  desc   String
  time   Int
  qty    Int
  dollar Int

  @@map("quotes")
}

// ADD DEVELOPMENT STAGE MODEL THEN DEPLOY STAGE

model DevelopDeploy {
  id     Int     @id @default(autoincrement())
  name   String
  stage  String
  type   String
  basic  Boolean
  isPage Boolean
  desc   String
  time   Int
  qty    Int
  dollar Int

  @@map("developDeploys")
}

model QuoteImg {
  id      Int    @id @default(autoincrement())
  imgKey  String @unique
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id String

  @@map("quoteImgs")
}

model DevDeployimg {
  id      Int    @id @default(autoincrement())
  imgKey  String @unique
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id String

  @@map("devDeployimgs")
}
